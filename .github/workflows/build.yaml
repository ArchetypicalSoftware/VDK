name: Build-Test-And-Publish
permissions:
  contents: write
on:
  workflow_run:
    workflows:
      - Bump-and-Tag-Semantic-Version
    types:
      - completed
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 'Get Version Tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.1.0 # Optional fallback tag to use when no tag can be found
          #workingDirectory: another/path/where/a/git/repo/is/checked/out # Optional alternative working directory

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # Specify the .NET version you are using
          
      - name: Restore
        run: dotnet restore ./cli
      
      - name: Build
        run: dotnet build ./cli --no-restore --configuration Release
      
      - name: Test
        run: dotnet test ./cli --no-build --configuration Release --verbosity normal

      - name: Install Zip Utility
        run: sudo apt-get install -y zip && mkdir -p ./artifacts


      - name: Publish Linux Build (x64)
        run: |
          dotnet publish ./cli/src/Vdk/Vdk.csproj -o ./packages/build/linux-x64 -r linux-x64 -c Release -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:IncludeNativeLibrariesForSelfExtract=true -p:IncludeAllContentForSelfExtract=true -p:selfcontained=true
          mkdir -p ./packages/build/linux-x64/ConfigMounts
          mkdir -p ./packages/build/linux-x64/Certs
          cp -r ./Certs ./packages/build/linux-x64/Certs
          cp ./cli/src/Vdk/ConfigMounts/hosts.toml ./packages/build/linux-x64/ConfigMounts/
          tar -czvf ./artifacts/vega-linux-x64.tar.gz -C ./packages/build/linux-x64 .

      - name: Publish Linux Build (x86)
        run: |
          dotnet publish ./cli/src/Vdk/Vdk.csproj -o ./packages/build/linux-x86 -r linux-x86 -c Release -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:IncludeNativeLibrariesForSelfExtract=true -p:IncludeAllContentForSelfExtract=true -p:selfcontained=true
          mkdir -p ./packages/build/linux-x86/ConfigMounts
          mkdir -p ./packages/build/linux-x86/Certs
          cp -r ./Certs ./packages/build/linux-x86/Certs
          cp ./cli/src/Vdk/ConfigMounts/hosts.toml ./packages/build/linux-x86/ConfigMounts/
          tar -czvf ./artifacts/vega-linux-x86.tar.gz -C ./packages/build/linux-x86 .

      - name: Publish Linux Build (arm)
        run: |
          dotnet publish ./cli/src/Vdk/Vdk.csproj -o ./packages/build/linux-arm -r linux-arm -c Release -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:IncludeNativeLibrariesForSelfExtract=true -p:IncludeAllContentForSelfExtract=true -p:selfcontained=true
          mkdir -p ./packages/build/linux-arm/ConfigMounts
          mkdir -p ./packages/build/linux-arm/Certs
          cp -r ./Certs ./packages/build/linux-arm/Certs
          cp ./cli/src/Vdk/ConfigMounts/hosts.toml ./packages/build/linux-arm/ConfigMounts/
          tar -czvf ./artifacts/vega-linux-arm.tar.gz -C ./packages/build/linux-arm .

      - name: Publish Linux Build (arm64)
        run: |
          dotnet publish ./cli/src/Vdk/Vdk.csproj -o ./packages/build/linux-arm64 -r linux-arm64 -c Release -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:IncludeNativeLibrariesForSelfExtract=true -p:IncludeAllContentForSelfExtract=true -p:selfcontained=true
          mkdir -p ./packages/build/linux-arm64/ConfigMounts
          mkdir -p ./packages/build/linux-arm64/Certs
          cp -r ./Certs ./packages/build/linux-arm64/Certs
          cp ./cli/src/Vdk/ConfigMounts/hosts.toml ./packages/build/linux-arm64/ConfigMounts/
          tar -czvf ./artifacts/vega-linux-arm64.tar.gz -C ./packages/build/linux-arm64 .


      - name: Create Release
        run: |
          gh release create ${{ steps.previoustag.outputs.tag }} \
            --title "Release v${{ steps.previoustag.outputs.tag }}" \
            --notes "This is the release for version ${{ steps.previoustag.outputs.tag }}" \
            ./artifacts/*.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}