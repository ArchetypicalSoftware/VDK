name: Build-Test-And-Publish
permissions:
  contents: write
on:
  workflow_run:
    workflows:
      - Bump-and-Tag-Semantic-Version
    types:
      - completed
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x64, x86, arm, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 'Get Version Tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        with:
          fallback: 0.1.0 # Optional fallback tag to use when no tag can be found

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # Specify the .NET version you are using
          
      - name: Restore
        run: dotnet restore ./cli
      
      - name: Build
        run: dotnet build ./cli --no-restore --configuration Release
      
      - name: Test
        run: dotnet test ./cli --no-build --configuration Release --verbosity normal

      - name: Install Zip Utility
        run: sudo apt-get install -y zip && mkdir -p ./artifacts

      - name: Publish Linux Build
        run: |
          RUNTIME_ID=linux-${{ matrix.arch }}
          OUTPUT_DIR=./packages/build/${RUNTIME_ID}
          ARTIFACT=vega-${RUNTIME_ID}.tar.gz
          dotnet publish ./cli/src/Vdk/Vdk.csproj -o $OUTPUT_DIR -r $RUNTIME_ID -c Release -p:PublishSingleFile=true -p:PublishReadyToRun=true -p:PublishReadyToRunShowWarnings=true -p:IncludeNativeLibrariesForSelfExtract=true -p:IncludeAllContentForSelfExtract=true -p:selfcontained=true
          mkdir -p $OUTPUT_DIR/ConfigMounts
          mkdir -p $OUTPUT_DIR/Certs
          cp -r ./Certs $OUTPUT_DIR/Certs
          cp ./cli/src/Vdk/ConfigMounts/hosts.toml $OUTPUT_DIR/ConfigMounts/
          tar -czvf ./artifacts/$ARTIFACT -C $OUTPUT_DIR .

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get Version Tag
        id: previoustag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 0.1.0
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Create Release
        run: |
          gh release create ${{ steps.previoustag.outputs.tag }} \
            --title "Release v${{ steps.previoustag.outputs.tag }}" \
            --notes "This is the release for version ${{ steps.previoustag.outputs.tag }}" \
            ./artifacts/*.*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}